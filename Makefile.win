# Makefile for Windows NT and Windows 95/98/2000

# Targets are:
#   _apacher   - build Apache in Release mode
#   _apached   - build Apache in Debug mode
#   installr   - build and install a Release build
#   installd   - build and install a Debug build
#   clean      - remove (most) generated files
#   _cleanr    - remove (most) files generated by a Release build
#   _cleand    - remove (most) files generated by a Debug build
#   _browse    - build the browse info file
#
# The following install defaults may be customized;
#
#   Option      Default
#   INSTDIR     \Apache2
#   PORT        80
#   SERVERNAME  localhost
#
# For example;
#
#   nmake /f Makefile.win PORT=80 INSTDIR="d:\Program Files\Apache" installr
#
# Be aware that certain awk's will not accept backslahed names,
# so the server root should be given in forward slashes (quoted),
# preferably with the drive designation!

default:        _apacher

!IF !EXIST("srclib\apr")
!MESSAGE Please check out or download and unpack the Apache Portability Runtime
!MESSAGE sources (apr and apr-util) into your $(INSTDIR)\srclib directory.
!MESSAGE Apache cannot build without these libraries!
!MESSAGE 
!ERROR Need $(INSTDIR)\srclib\apr
!ENDIF

!IF !EXIST("srclib\apr-util")
!MESSAGE Please check out or download and unpack the Apache Portability Runtime
!MESSAGE sources (apr and apr-util) into your $(INSTDIR)\srclib directory.
!MESSAGE Apache cannot build without these libraries!
!MESSAGE 
!ERROR Need $(INSTDIR)\srclib\apr-util
!ENDIF

# Note; _tryssl: is only used by the msvc developer studio environment to 'fix up'
#	the build, since conditional dependencies aren't supported.
#
!IF EXIST("srclib\openssl")
!IF "$(LONG)" == "Debug"
SSLBIN=out32dll.dbg
!ELSE
SSLBIN=out32dll
!ENDIF
_tryssl:
!IF EXIST("modules\ssl\mod_ssl.mak")
	cd modules\ssl
	$(MAKE) $(MAKEOPT) -f mod_ssl.mak CFG="mod_ssl - Win32 $(LONG)" RECURSE=0 $(LONG)\mod_ssl.so
	cd ..\..
	cd support
	$(MAKE) $(MAKEOPT) -f abs.mak CFG="abs - Win32 $(LONG)" RECURSE=0 $(LONG)\abs.exe
	cd ..
!ELSE
	msdev Apache.dsw /MAKE\
		"mod_ssl - Win32 $(LONG)"\
		"abs - Win32 $(LONG)" /NORECURSE $(CTARGET)
!ENDIF

!ELSE
_tryssl:
	echo mod_ssl and ab/ssl will not build without openssl 
	echo installed in $(INSTDIR)\srclib\openssl.  They must be precompiled 
	echo using the ms/ntdll.mak file.  See INSTALL.W32 for details.
!ENDIF

!IF "$(INSTDIR)" == ""
INSTDIR=\Apache2
!MESSAGE INSTDIR not specified, installing to default $(INSTDIR)
!ENDIF 
!IF "$(PORT)" == ""
PORT=80
!MESSAGE PORT not specified, using default $(PORT)
!MESSAGE To change this use $(MAKE) -f makefile.win PORT=8080 installr
!ENDIF 
!IF "$(SERVERNAME)" == ""
SERVERNAME=localhost
!MESSAGE SERVERNAME not specified, using default $(SERVERNAME)
!MESSAGE To change this use $(MAKE) -f makefile.win PORT=www.example.com installr
!ENDIF

!IFNDEF MAKEOPT
# Only default the behavior if MAKEOPT= is omitted
!IF "$(MAKE)" == "NMAKE"
# Microsoft NMake options
MAKEOPT=-nologo
!ELSEIF "($MAKE)" == "make"
# Borland make options?  Not really supported (yet)
MAKEOPT=-s -N
!ENDIF
!ENDIF

_browse:
	cd Browse
	  bscmake.exe -nologo -Iu -o Apache.bsc *.sbr
	cd ..

_apacher: 
	$(MAKE) $(MAKEOPT) -f Makefile.win SHORT=R LONG=Release _build

_apached: 
	$(MAKE) $(MAKEOPT) -f Makefile.win SHORT=D LONG=Debug   _build

installr: 
	$(MAKE) $(MAKEOPT) -f Makefile.win SHORT=R LONG=Release _build _install

installd: 
	$(MAKE) $(MAKEOPT) -f Makefile.win SHORT=D LONG=Debug   _build _install

clean:	_cleanr _cleand
	rd /s Browse < << 
y
<<

!IF EXIST("Apache.mak")

_cleanr:
	$(MAKE) $(MAKEOPT) -f Makefile.win SHORT=R LONG=Release CTARGET=CLEAN _build

_cleand:  
	$(MAKE) $(MAKEOPT) -f Makefile.win SHORT=D LONG=Debug   CTARGET=CLEAN _build

_build:
	echo Building Win32 $(LONG) targets ($(SHORT) suffixes)
	cd srclib\apr
	 $(MAKE) $(MAKEOPT) -f apr.mak             CFG="apr - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f libapr.mak          CFG="libapr - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd srclib\apr-util\uri
	 $(MAKE) $(MAKEOPT) -f gen_uri_delims.mak  CFG="gen_uri_delims - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..\..
	cd srclib\apr-util\xml\expat\lib
	 $(MAKE) $(MAKEOPT) -f xml.mak             CFG="xml - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..\..
	 $(MAKE) $(MAKEOPT) -f aprutil.mak         CFG="aprutil - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f libaprutil.mak      CFG="libaprutil - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd srclib\pcre
	 $(MAKE) $(MAKEOPT) -f dftables.mak        CFG="dftables - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f pcre.mak            CFG="pcre - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f pcreposix.mak       CFG="pcreposix - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd server
	 $(MAKE) $(MAKEOPT) -f gen_test_char.mak   CFG="gen_test_char - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..
	 -del $(LONG)\buildmark.obj
	 $(MAKE) $(MAKEOPT) -f libhttpd.mak        CFG="libhttpd - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f Apache.mak          CFG="Apache - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd modules\aaa
	 $(MAKE) $(MAKEOPT) -f mod_access.mak      CFG="mod_access - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_auth.mak        CFG="mod_auth - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_auth_anon.mak   CFG="mod_auth_anon - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_auth_dbm.mak    CFG="mod_auth_dbm - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_auth_digest.mak CFG="mod_auth_digest - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd modules\arch\win32
	 $(MAKE) $(MAKEOPT) -f mod_isapi.mak       CFG="mod_isapi - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..\..
	cd modules\cache
	 $(MAKE) $(MAKEOPT) -f mod_file_cache.mak  CFG="mod_file_cache - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd modules\dav\main
	 $(MAKE) $(MAKEOPT) -f mod_dav.mak         CFG="mod_dav - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..\..
	cd modules\dav\fs
	 $(MAKE) $(MAKEOPT) -f mod_dav_fs.mak      CFG="mod_dav_fs - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..\..
	cd modules\filters
	 $(MAKE) $(MAKEOPT) -f mod_include.mak     CFG="mod_include - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd modules\generators
	 $(MAKE) $(MAKEOPT) -f mod_asis.mak        CFG="mod_asis - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_autoindex.mak   CFG="mod_autoindex - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_cgi.mak         CFG="mod_cgi - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_info.mak        CFG="mod_info - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_status.mak      CFG="mod_status - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd modules\http
	 $(MAKE) $(MAKEOPT) -f mod_mime.mak        CFG="mod_mime - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd modules\loggers
	 $(MAKE) $(MAKEOPT) -f mod_log_config.mak  CFG="mod_log_config - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd modules\mappers
	 $(MAKE) $(MAKEOPT) -f mod_actions.mak     CFG="mod_actions - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_alias.mak       CFG="mod_alias - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_dir.mak         CFG="mod_dir - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_imap.mak        CFG="mod_imap - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_negotiation.mak CFG="mod_negotiation - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_rewrite.mak     CFG="mod_rewrite - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_speling.mak     CFG="mod_speling - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_userdir.mak     CFG="mod_userdir - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_vhost_alias.mak CFG="mod_vhost_alias - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd modules\metadata
	 $(MAKE) $(MAKEOPT) -f mod_cern_meta.mak   CFG="mod_cern_meta - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_env.mak         CFG="mod_env - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_expires.mak     CFG="mod_expires - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_headers.mak     CFG="mod_headers - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_mime_magic.mak  CFG="mod_mime_magic - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_setenvif.mak    CFG="mod_setenvif - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_unique_id.mak   CFG="mod_unique_id - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f mod_usertrack.mak   CFG="mod_usertrack - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd modules\proxy
	 $(MAKE) $(MAKEOPT) -f mod_proxy.mak       CFG="mod_proxy - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f proxy_connect.mak   CFG="proxy_connect - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f proxy_ftp.mak       CFG="proxy_ftp - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f proxy_http.mak      CFG="proxy_http - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
!IF EXIST("srclib\openssl")
	cd modules\ssl
	 $(MAKE) $(MAKEOPT) -f mod_ssl.mak         CFG="mod_ssl - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..
	cd support
	 $(MAKE) $(MAKEOPT) -f abs.mak             CFG="abs - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..
!ENDIF
	cd support
	 $(MAKE) $(MAKEOPT) -f ab.mak              CFG="ab - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f htdbm.mak           CFG="htdbm - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f htdigest.mak        CFG="htdigest - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f htpasswd.mak        CFG="htpasswd - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f logresolve.mak      CFG="logresolve - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f rotatelogs.mak      CFG="rotatelogs - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..
	cd support\win32
	 $(MAKE) $(MAKEOPT) -f ApacheMonitor.mak   CFG="ApacheMonitor - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	 $(MAKE) $(MAKEOPT) -f wintty.mak          CFG="wintty - Win32 $(LONG)" RECURSE=0 $(CTARGET)
	cd ..\..

!ELSE

_cleanr:  
	$(MAKE) $(MAKEOPT) -f Makefile.win SHORT=R LONG=Release CTARGET="/CLEAN" _build

_cleand:  
	$(MAKE) $(MAKEOPT) -f Makefile.win SHORT=D LONG=Debug   CTARGET="/CLEAN" _build

_build:
	echo Building Win32 $(LONG) targets ($(SHORT) suffixes)
	-del $(LONG)\buildmark.obj
	msdev Apache.dsw /MAKE\
		"apr - Win32 $(LONG)"\
		"libapr - Win32 $(LONG)"\
		"gen_uri_delims - Win32 $(LONG)"\
		"xml - Win32 $(LONG)"\
		"aprutil - Win32 $(LONG)"\
		"libaprutil - Win32 $(LONG)"\
		"dftables - Win32 $(LONG)"\
		"pcre - Win32 $(LONG)"\
		"pcreposix - Win32 $(LONG)"\
		"gen_test_char - Win32 $(LONG)"\
		"libhttpd - Win32 $(LONG)"\
		"Apache - Win32 $(LONG)"\
		"mod_access - Win32 $(LONG)"\
		"mod_actions - Win32 $(LONG)"\
		"mod_alias - Win32 $(LONG)"\
		"mod_asis - Win32 $(LONG)"\
		"mod_auth - Win32 $(LONG)"\
		"mod_auth_anon - Win32 $(LONG)"\
		"mod_auth_dbm - Win32 $(LONG)"\
		"mod_auth_digest - Win32 $(LONG)"\
		"mod_autoindex - Win32 $(LONG)"\
		"mod_cern_meta - Win32 $(LONG)"\
		"mod_cgi - Win32 $(LONG)"\
		"mod_dav - Win32 $(LONG)"\
		"mod_dav_fs - Win32 $(LONG)"\
		"mod_dir - Win32 $(LONG)"\
		"mod_env - Win32 $(LONG)"\
		"mod_expires - Win32 $(LONG)"\
		"mod_file_cache - Win32 $(LONG)"\
		"mod_headers - Win32 $(LONG)"\
		"mod_imap - Win32 $(LONG)"\
		"mod_include - Win32 $(LONG)"\
		"mod_info - Win32 $(LONG)"\
		"mod_isapi - Win32 $(LONG)"\
		"mod_log_config - Win32 $(LONG)"\
		"mod_mime - Win32 $(LONG)"\
		"mod_mime_magic - Win32 $(LONG)"\
		"mod_negotiation - Win32 $(LONG)"\
		"mod_proxy - Win32 $(LONG)"\
		"mod_rewrite - Win32 $(LONG)"\
		"mod_setenvif - Win32 $(LONG)"\
		"mod_status - Win32 $(LONG)"\
		"mod_speling - Win32 $(LONG)"\
		"mod_unique_id - Win32 $(LONG)"\
		"mod_userdir - Win32 $(LONG)"\
		"mod_usertrack - Win32 $(LONG)"\
		"mod_vhost_alias - Win32 $(LONG)"\
		"proxy_connect - Win32 $(LONG)"\
		"proxy_ftp - Win32 $(LONG)"\
		"proxy_http - Win32 $(LONG)"\
		"ab - Win32 $(LONG)"\
		"htdbm - Win32 $(LONG)"\
		"htdigest - Win32 $(LONG)"\
		"htpasswd - Win32 $(LONG)"\
		"logresolve - Win32 $(LONG)"\
		"rotatelogs - Win32 $(LONG)"\
		"ApacheMonitor - Win32 $(LONG)"\
		"wintty - Win32 $(LONG)" /NORECURSE $(CTARGET)
!IF EXIST("srclib\openssl")
	msdev Apache.dsw /MAKE\
		"mod_ssl - Win32 $(LONG)"\
		"abs - Win32 $(LONG)" /NORECURSE $(CTARGET)
!ENDIF

!ENDIF

_install:
	echo Y >.y
	echo A >.A
	-mkdir "$(INSTDIR)"
	-mkdir "$(INSTDIR)\bin"
	-mkdir "$(INSTDIR)\cgi-bin"
	-mkdir "$(INSTDIR)\conf"
	-mkdir "$(INSTDIR)\error"
	-mkdir "$(INSTDIR)\htdocs"
	-mkdir "$(INSTDIR)\manual"
	-mkdir "$(INSTDIR)\icons"
	-mkdir "$(INSTDIR)\include"
	-mkdir "$(INSTDIR)\lib"
	-mkdir "$(INSTDIR)\logs"
	-mkdir "$(INSTDIR)\modules"
	-mkdir "$(INSTDIR)\proxy"
	copy ABOUT_APACHE "$(INSTDIR)\ABOUT_APACHE.txt"
	copy CHANGES "$(INSTDIR)\CHANGES.txt"
	copy INSTALL "$(INSTDIR)\INSTALL.txt"
	copy LICENSE "$(INSTDIR)\LICENSE.txt"
!IF EXIST("srclib\openssl")
	copy << + README "$(INSTDIR)\README.txt"

  This product includes cryptographic software written by
  Eric Young (eay@cryptsoft.com).  This product includes software written
  by Tim Hudson (tjh@cryptsoft.com).  This product includes software
  developed by the OpenSSL Project for use in the OpenSSL Toolkit.
  (http://www.openssl.org/)
<<
!ELSE
#	--- just a vanilla copy, in this case.
	copy README "$(INSTDIR)\README.txt"
!ENDIF
	copy $(LONG)\Apache.exe "$(INSTDIR)\bin"
	copy $(LONG)\libhttpd.dll "$(INSTDIR)\bin"
	copy srclib\apr\$(LONG)\libapr.dll "$(INSTDIR)\bin"
	copy srclib\apr-util\$(LONG)\libaprutil.dll "$(INSTDIR)\bin"
	copy modules\aaa\$(LONG)\mod_access.so "$(INSTDIR)\modules"
	copy modules\aaa\$(LONG)\mod_auth.so "$(INSTDIR)\modules"
	copy modules\aaa\$(LONG)\mod_auth_anon.so "$(INSTDIR)\modules"
	copy modules\aaa\$(LONG)\mod_auth_dbm.so "$(INSTDIR)\modules"
	copy modules\aaa\$(LONG)\mod_auth_digest.so "$(INSTDIR)\modules"
	copy modules\arch\win32\$(LONG)\mod_isapi.so "$(INSTDIR)\modules"
	copy modules\cache\$(LONG)\mod_file_cache.so "$(INSTDIR)\modules"
	copy modules\dav\fs\$(LONG)\mod_dav_fs.so "$(INSTDIR)\modules"
	copy modules\dav\main\$(LONG)\mod_dav.so "$(INSTDIR)\modules"
	copy modules\filters\$(LONG)\mod_include.so "$(INSTDIR)\modules"
	copy modules\generators\$(LONG)\mod_asis.so "$(INSTDIR)\modules"
	copy modules\generators\$(LONG)\mod_autoindex.so "$(INSTDIR)\modules"
	copy modules\generators\$(LONG)\mod_cgi.so "$(INSTDIR)\modules"
	copy modules\generators\$(LONG)\mod_info.so "$(INSTDIR)\modules"
	copy modules\generators\$(LONG)\mod_status.so "$(INSTDIR)\modules"
	copy modules\http\$(LONG)\mod_mime.so "$(INSTDIR)\modules"
	copy modules\loggers\$(LONG)\mod_log_config.so "$(INSTDIR)\modules"
	copy modules\mappers\$(LONG)\mod_actions.so "$(INSTDIR)\modules"
	copy modules\mappers\$(LONG)\mod_alias.so "$(INSTDIR)\modules"
	copy modules\mappers\$(LONG)\mod_dir.so "$(INSTDIR)\modules"
	copy modules\mappers\$(LONG)\mod_imap.so "$(INSTDIR)\modules"
	copy modules\mappers\$(LONG)\mod_negotiation.so "$(INSTDIR)\modules"
	copy modules\mappers\$(LONG)\mod_rewrite.so "$(INSTDIR)\modules"
	copy modules\mappers\$(LONG)\mod_speling.so "$(INSTDIR)\modules"
	copy modules\mappers\$(LONG)\mod_userdir.so "$(INSTDIR)\modules"
	copy modules\mappers\$(LONG)\mod_vhost_alias.so "$(INSTDIR)\modules"
	copy modules\metadata\$(LONG)\mod_cern_meta.so "$(INSTDIR)\modules"
	copy modules\metadata\$(LONG)\mod_env.so "$(INSTDIR)\modules"
	copy modules\metadata\$(LONG)\mod_expires.so "$(INSTDIR)\modules"
	copy modules\metadata\$(LONG)\mod_headers.so "$(INSTDIR)\modules"
	copy modules\metadata\$(LONG)\mod_mime_magic.so "$(INSTDIR)\modules"
	copy modules\metadata\$(LONG)\mod_setenvif.so "$(INSTDIR)\modules"
	copy modules\metadata\$(LONG)\mod_unique_id.so "$(INSTDIR)\modules"
	copy modules\metadata\$(LONG)\mod_usertrack.so "$(INSTDIR)\modules"
	copy modules\proxy\$(LONG)\mod_proxy.so "$(INSTDIR)\modules"
	copy modules\proxy\$(LONG)\proxy_connect.so "$(INSTDIR)\modules"
	copy modules\proxy\$(LONG)\proxy_ftp.so "$(INSTDIR)\modules"
	copy modules\proxy\$(LONG)\proxy_http.so "$(INSTDIR)\modules"
!IF EXIST("srclib\openssl")
	-copy modules\ssl\$(LONG)\mod_ssl.so "$(INSTDIR)\modules"
	-copy srclib\openssl\$(SSLBIN)\openssl.exe "$(INSTDIR)\bin"
	-copy srclib\openssl\$(SSLBIN)\libeay32.dll "$(INSTDIR)\bin"
	-copy srclib\openssl\$(SSLBIN)\ssleay32.dll "$(INSTDIR)\bin"
	-copy srclib\openssl\LICENSE "$(INSTDIR)\OPENSSL-LICENSE.txt"
	-copy << + srclib\openssl\NEWS "$(INSTDIR)\OPENSSL-NEWS.txt"

 Apache HTTP Server 2.0 Limited OpenSSL Distribution  17 Aug 2001

 This binary distribution includes the minimal components of OpenSSL required
 to support mod_ssl for Apache HTTP Server version 2.0 (details are listed 
 in OPENSSL-README.txt.)  For the complete list of CHANGES to this and later 
 versions of OpenSSL, please refer to the definative source,
 <http://www.openssl.org/news/changelog.html>, or see the CHANGES file in the
 full binary or source distribution package from <http://www.openssl.org/>.

 These OpenSSL binaries were built for distribution from the U.S. without 
 support for the patented encryption methods IDEA, MDC-2 or RC5.

--------------------------------------------------------------------------------
<<
	-copy << + srclib\openssl\README "$(INSTDIR)\OPENSSL-README.txt"

 Apache HTTP Server 2.0 Limited OpenSSL Distribution  19 Aug 2001

 This binary installation of OpenSSL is a limited distribution of the documents
 OPENSSL-LICENSE.txt, OPENSSL-NEWS.txt and OPENSSL-README.txt, and the binaries

   libeay32.dll
   ssleay32.dll
   openssl.exe

 These are the minimal libraries and tools required to use mod_ssl as 
 distributed with Apache HTTP Server version 2.0.  No library files, headers
 or sources are distributed with this binary distribution.  Please refer to the
 <http://www.openssl.org/> site for complete source or binary distributions.

 These OpenSSL binaries were built for distribution from the U.S. without 
 support for the patented encryption methods IDEA, MDC-2 or RC5.

 The Apache HTTP Project only supports the binary distribution of these files
 and development of the mod_ssl module.  We cannot provide support assistance
 for using or configuring the OpenSSL package or these modules.  Please refer
 all installation and configuration questions to the appropriate forum,
 such as the user supported newsgroups comp.infosystems.www.servers.unix or
 comp.infosystems.www.servers.ms-windows, or see the support options
 listed at <http://www.openssl.org/support/>.

--------------------------------------------------------------------------------
<<
	copy support\$(LONG)\abs.exe "$(INSTDIR)\bin\ab.exe"
!ELSE
	copy support\$(LONG)\ab.exe "$(INSTDIR)\bin"
!ENDIF
	copy support\$(LONG)\htdbm.exe "$(INSTDIR)\bin"
	copy support\$(LONG)\htdigest.exe "$(INSTDIR)\bin"
	copy support\$(LONG)\htpasswd.exe "$(INSTDIR)\bin"
	copy support\$(LONG)\logresolve.exe "$(INSTDIR)\bin"
	copy support\$(LONG)\rotatelogs.exe "$(INSTDIR)\bin"
	copy support\win32\$(LONG)\ApacheMonitor.exe "$(INSTDIR)\bin"
	copy support\win32\$(LONG)\wintty.exe "$(INSTDIR)\bin"
	copy docs\cgi-examples\printenv "$(INSTDIR)\cgi-bin\printenv.pl"
	-awk -f <<script.awk "docs\cgi-examples\printenv" "$(INSTDIR)\cgi-bin\printenv.pl"
    BEGIN { 
	srcfl = ARGV[1];
	dstfl = ARGV[2];
	if ( "perl -e \"print $$^X;\"" | getline perlroot ) {
	    gsub( /\\/, "/", perlroot );
	    print "#!" perlroot > dstfl;
	    getline < srcfl;
	}
	while ( ( getline < srcfl ) > 0 ) {
	    print $$0 > dstfl;
	}
    }
<<
	xcopy docs\cgi-examples\test-cgi.bat "$(INSTDIR)\cgi-bin" /d
	xcopy docs\error "$(INSTDIR)\error" /s /d < .a
	xcopy docs\docroot "$(INSTDIR)\htdocs" /d < .a
	xcopy docs\manual "$(INSTDIR)\manual" /s /d < .a

	xcopy srclib\pcre\pcre*.h "$(INSTDIR)\include" /d < .a
	xcopy srclib\apr-util\xml\expat\lib\expat.h "$(INSTDIR)\include" /d
	xcopy srclib\apr\include\*.h "$(INSTDIR)\include" /d < .a
	xcopy srclib\apr-util\include\*.h "$(INSTDIR)\include" /d < .a
	xcopy include\*.h "$(INSTDIR)\include" /d < .a
	xcopy docs\icons "$(INSTDIR)\icons" /s /d < .a
	copy srclib\apr\Lib$(SHORT)\apr.lib "$(INSTDIR)\lib"
	copy srclib\apr-util\Lib$(SHORT)\aprutil.lib "$(INSTDIR)\lib"
	copy srclib\pcre\Lib$(SHORT)\pcre.lib "$(INSTDIR)\lib"
	copy srclib\pcre\Lib$(SHORT)\pcreposix.lib "$(INSTDIR)\lib"
#       ### until we determine if it's safe to change expat>libexpat and xml>expat
#       within our cvs tree... at least remain consistent to our naming conventions;
	copy srclib\apr-util\xml\expat\lib\Lib$(SHORT)\xml.lib "$(INSTDIR)\lib\expat.lib"
	copy srclib\apr\$(LONG)\libapr.lib "$(INSTDIR)\lib"
	copy srclib\apr\$(LONG)\libapr.exp "$(INSTDIR)\lib"
	copy srclib\apr-util\$(LONG)\libaprutil.lib "$(INSTDIR)\lib"
	copy srclib\apr-util\$(LONG)\libaprutil.exp "$(INSTDIR)\lib"
	copy $(LONG)\libhttpd.exp "$(INSTDIR)\lib"
	copy $(LONG)\libhttpd.lib "$(INSTDIR)\lib"
	copy modules\dav\main\$(LONG)\mod_dav.exp "$(INSTDIR)\lib"
	copy modules\dav\main\$(LONG)\mod_dav.lib "$(INSTDIR)\lib"
	copy docs\conf\magic "$(INSTDIR)\conf\magic.default"
	if not exist "$(INSTDIR)\conf\magic" \
	    copy "$(INSTDIR)\conf\magic.default" "$(INSTDIR)\conf\magic"
	copy docs\conf\mime.types "$(INSTDIR)\conf\mime.types.default"
	if not exist "$(INSTDIR)\conf\mime.types" \
	    copy "$(INSTDIR)\conf\mime.types.default" "$(INSTDIR)\conf\mime.types"
	copy docs\conf\httpd-win.conf "$(INSTDIR)\conf\httpd.default.conf"
	-awk -f <<script.awk "docs\conf\httpd-win.conf" "$(INSTDIR)\conf\httpd.default.conf" "$(INSTDIR)"
    BEGIN { 
	srcfl = ARGV[1];
	dstfl = ARGV[2];
	serverroot = ARGV[3];
	gsub( /\\/, "/", serverroot );
	while ( ( getline < srcfl ) > 0 ) {
	    gsub( /@@ServerRoot@@/, serverroot );
	    gsub( /@@ServerName@@/, "$(SERVERNAME)" );
	    gsub( /@@Port@@/, "$(PORT)" );
	    print $$0 > dstfl;
	}
    }
<<
	if not exist "$(INSTDIR)\conf\httpd.conf" \
	    copy "$(INSTDIR)\conf\httpd.default.conf" "$(INSTDIR)\conf\httpd.conf"
	copy docs\conf\ssl-std.conf "$(INSTDIR)\conf\ssl.default.conf"
	-awk -f <<script.awk "docs\conf\ssl-std.conf" "$(INSTDIR)\conf\ssl.default.conf" "$(INSTDIR)"
    BEGIN { 
	srcfl = ARGV[1];
	dstfl = ARGV[2];
	serverroot = ARGV[3];
	gsub( /\\/, "/", serverroot );
	while ( ( getline < srcfl ) > 0 ) {
	    gsub( /@@ServerRoot@@/, serverroot );
	    print $$0 > dstfl;
	}
    }
<<
	if not exist "$(INSTDIR)\conf\ssl.conf" \
	    copy "$(INSTDIR)\conf\ssl.default.conf" "$(INSTDIR)\conf\ssl.conf"
	awk -f <<script.awk "support\dbmmanage.in" >"$(INSTDIR)\bin\dbmmanage.pl"
    { if ( $$0 ~ /^BEGIN \{ @AnyDBM_File::/ ) {
	  sub( /ISA = qw\(.*\)/, "ISA = qw(SDBM_File)" ); 
      }
      if ( $$0 !~ /^#!@perlbin@/ )
	  print $$0;
    }
<<
	del .a .y

