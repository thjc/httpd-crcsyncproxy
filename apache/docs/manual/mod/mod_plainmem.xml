<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<!-- $LastChangedRevision: 559006 $ -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<modulesynopsis metafile="mod_plainmem.xml.meta">

<name>mod_plainmem</name>
<description>Slot-based shared memory provider.</description>
<status>Extension</status>
<sourcefile>mod_plainmem.c</sourcefile>
<identifier>plainmem_module</identifier>

<summary>
    <p><code>mod_plainmem</code> is a memory provider which
    provides for creation and access to a plain memory segment
    in which the datasets are organized in "slots." Although
    it can be used directly, normally <module>mod_slotmem</module>
    is used as a front-end.
    </p>

    <p>If the memory needs to be shared between threads and
    processes, a better provider would be
    <module>mod_sharedmem</module>.
    </p>

    <p><code>mod_plainmem</code> provides the following
    API functions:
    </p>

    <dl>
      <dt>apr_status_t slotmem_do(ap_slotmem_t *s, ap_slotmem_callback_fn_t *func, void *data, apr_pool_t *pool)</dt>
      <dd>call the callback on all worker slots</dd>

      <dt>apr_status_t slotmem_create(ap_slotmem_t **new, const char *name, apr_size_t item_size, int item_num, apr_pool_t *pool)</dt>
      <dd>create a new slotmem with each item size is item_size.</dd>

      <dt>apr_status_t slotmem_attach(ap_slotmem_t **new, const char *name, apr_size_t *item_size, int *item_num, apr_pool_t *pool)</dt>
      <dd>attach to an existing slotmem.</dd>

      <dt>apr_status_t slotmem_mem(ap_slotmem_t *s, int item_id, void**mem)</dt>
      <dd>get the memory associated with this worker slot.</dd>

      <dt>apr_status_t slotmem_lock(ap_slotmem_t *s)</dt>
      <dd>lock the memory segment</dd>

      <dt>(apr_status_t slotmem_unlock(ap_slotmem_t *s)</dt>
      <dd>unlock the memory segment</dd>
    </dl>

</summary>

</modulesynopsis>
