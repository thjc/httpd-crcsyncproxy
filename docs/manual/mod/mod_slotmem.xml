<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<!-- $LastChangedRevision: 559006 $ -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<modulesynopsis metafile="mod_slotmem.xml.meta">

<name>mod_slotmem</name>
<description>Slot-based memory implementation API.</description>
<status>Extension</status>
<sourcefile>mod_slotmem.c</sourcefile>
<identifier>slotmem_module</identifier>

<summary>
    <p><code>mod_slotmem</code> provides an interface to a
    memory allocation implementation which is based on the
    concept of datasets being in various "slots" within
    a larger memory segment. As such, it is similar in
    concept to a generic table or array. The real use of
    the module is as a front-end to various providers
    (such as <module>mod_sharedmem</module>) which deal
    with the actual implementations. This allows modules
    to use a single API for memory usage, to matter what
    the underlying implementation is.
    </p>

    <p><code>mod_slotmem</code> provides the following
    API functions:
    </p>

    <dl>
      <dt>ap_slotmem_storage_method *ap_slotmem_method(const char *provider)</dt>
      <dd>obtain the provider method desired</dd>

      <dt>apr_status_t ap_slotmem_do(ap_slotmem_storage_method *sm, ap_slotmem_t *s, ap_slotmem_callback_fn_t *func, void *data, apr_pool_t *pool)</dt>
      <dd>call the callback on all worker slots</dd>

      <dt>apr_status_t ap_slotmem_create(ap_slotmem_storage_method *sm, ap_slotmem_t **new, const char *name, apr_size_t item_size, int item_num, apr_pool_t *pool)</dt>
      <dd>create a new slotmem with each item size is item_size.</dd>

      <dt>apr_status_t ap_slotmem_attach(ap_slotmem_storage_method *sm, ap_slotmem_t **new, const char *name, apr_size_t *item_size, int *item_num, apr_pool_t *pool)</dt>
      <dd>attach to an existing slotmem.</dd>

      <dt>apr_status_t ap_slotmem_mem(ap_slotmem_storage_method *sm, ap_slotmem_t *s, int item_id, void**mem)</dt>
      <dd>get the memory associated with this worker slot.</dd>

      <dt>apr_status_t ap_slotmem_lock(ap_slotmem_storage_method *sm, ap_slotmem_t *s)</dt>
      <dd>lock the memory segment</dd>

      <dt>(apr_status_t ap_slotmem_unlock(ap_slotmem_storage_method *sm, ap_slotmem_t *s)</dt>
      <dd>unlock the memory segment</dd>
    </dl>

</summary>

</modulesynopsis>
