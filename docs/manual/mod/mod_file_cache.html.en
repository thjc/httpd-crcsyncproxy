<html><head><META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><!--
        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
              This file is generated from xml source: DO NOT EDIT
        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      --><title>mod_file_cache - Apache HTTP Server</title><link href="../style/manual.css" type="text/css" rel="stylesheet"></head><body><blockquote><div align="center"><img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]"><h3>Apache HTTP Server Version 2.0</h3></div><h1 align="center">Apache Module mod_file_cache</h1><table cellspacing="1" cellpadding="0" bgcolor="#cccccc"><tr><td><table bgcolor="#ffffff"><tr><td nowrap="nowrap" valign="top"><span class="help">Description:
                      </span></td><td>Caches a static list of files in memory</td></tr><tr><td nowrap="nowrap"><a href="module-dict.html#Status" class="help">Status:
                      </a></td><td>Experimental</td></tr><tr><td nowrap="nowrap"><a href="module-dict.html#ModuleIdentifier" class="help">Module&nbsp;Identifier:
                        </a></td><td>file_cache_module</td></tr></table></td></tr></table><h2>Summary</h2>

<blockquote><table><tr><td bgcolor="#ffe5f5">
This module should be used with care. You can easily
    create a broken site using mod_file_cache, so read this
    document carefully.
</td></tr></table></blockquote>

    <p><em>Caching</em> frequently requested files that change very
    infrequently is a technique for reducing server load.
    mod_file_cache provides two techniques for caching frequently
    requested <em>static</em> files. Through configuration
    directives, you can direct mod_file_cache to either open then
    mmap()a file, or to pre-open a file and save the file's open
    <em>file handle</em>. Both techniques reduce server load when
    processing requests for these files by doing part of the work
    (specifically, the file I/O) for serving the file when the
    server is started rather than during each request.</p>

    <p>Notice: You cannot use this for speeding up CGI programs or
    other files which are served by special content handlers. It
    can only be used for regular files which are usually served by
    the Apache core content handler.</p>

    <p>This module is an extension of and borrows heavily from the
    mod_mmap_static module in Apache 1.3.</p>
<h2>Directives</h2><ul><li><a href="#cachefile">CacheFile</a></li><li><a href="#mmapfile">MMapFile</a></li></ul><h2>Using mod_file_cache</h2>

    <p><code><a href="../mod/mod_file_cache.html">mod_file_cache</a></code> caches a list of statically
    configured files via <a href="#mmapfile" class="directive"><code class="directive">MMapFile</code></a> or <a href="#cachefile" class="directive"><code class="directive">CacheFile</code></a> directives in the
    main server configuration.</p>

    <p>Not all platforms support both directives. For example, Apache
    on Windows does not currently support the <a href="#mmapstatic" class="directive"><code class="directive">MMapStatic</code></a> directive, while
    other platforms, like AIX, support both. You will receive an error
    message in the server error log if you attempt to use an
    unsupported directive. If given an unsupported directive, the
    server will start but the file will not be cached. On platforms
    that support both directives, you should experiment with both to
    see which works best for you.</p>

<h3>MmapFile Directive</h3>

    <p>The <a href="#mmapfile" class="directive"><code class="directive">MmapFile</code></a>
    directive of <code><a href="../mod/mod_file_cache.html">mod_file_cache</a></code> maps a list of
    statically configured files into memory through the system call
    <code>mmap()</code>. This system call is available on most modern
    Unix derivates, but not on all. There are sometimes
    system-specific limits on the size and number of files that can be
    mmap()d, experimentation is probably the easiest way to find
    out.</p>

    <p>This mmap()ing is done once at server start or restart,
    only. So whenever one of the mapped files changes on the
    filesystem you <em>have</em> to restart the server (see the <a href="../stopping.html">Stopping and Restarting</a>
    documentation). To reiterate that point: if the files are
    modified <em>in place</em> without restarting the server you
    may end up serving requests that are completely bogus. You
    should update files by unlinking the old copy and putting a new
    copy in place. Most tools such as <code>rdist</code> and
    <code>mv</code> do this. The reason why this modules doesn't
    take care of changes to the files is that this check would need
    an extra <code>stat()</code> every time which is a waste and
    against the intent of I/O reduction.</p>


<h3>CacheFile Directive</h3>

    <p>The <a href="#cachefile" class="directive"><code class="directive">CacheFile</code></a>
    directive of <code><a href="../mod/mod_file_cache.html">mod_file_cache</a></code> opens an active
    <em>handle</em> or <em>file descriptor</em> to the file (or files)
    listed in the configuration directive and places these open file
    handles in the cache. When the file is requested, the server
    retrieves the handle from the cache and passes it to the
    sendfile() (or TransmitFile() on Windows), socket API.</p>

    <p>Insert more details about sendfile API...</p>

    <p>This file handle caching is done once at server start or
    restart, only. So whenever one of the cached files changes on
    the filesystem you <em>have</em> to restart the server (see the
    <a href="../stopping.html">Stopping and Restarting</a>
    documentation). To reiterate that point: if the files are
    modified <em>in place</em> without restarting the server you
    may end up serving requests that are completely bogus. You
    should update files by unlinking the old copy and putting a new
    copy in place. Most tools such as <code>rdist</code> and
    <code>mv</code> do this.</p>


<blockquote><table><tr><td bgcolor="#e0e5f5"><p align="center"><strong>Note</strong></p> Don't bother asking for a for a
    directive which recursively caches all the files in a
    directory. Try this instead... See the 
    <a href="../mod/core.html#include" class="directive"><code class="directive">Include</code></a> directive, and consider
    this command:
<blockquote><table cellpadding="10"><tr><td bgcolor="#eeeeee"><code>
  find /www/htdocs -type f -print \ <br>
  | sed -e 's/.*/mmapfile &amp;/' &gt; /www/conf/mmap.conf
</code></td></tr></table></blockquote>
</td></tr></table></blockquote>

<hr><h2><a name="CacheFile">CacheFile</a> <a name="cachefile">Directive</a></h2><table cellpadding="1" cellspacing="0" border="0" bgcolor="#cccccc"><tr><td><table bgcolor="#ffffff"><tr><td nowrap="nowrap"><strong>Description: 
                  </strong></td><td></td></tr><tr><td nowrap="nowrap"><a href="directive-dict.html#Syntax" class="help">Syntax:
                  </a></td><td>CacheFile
    <em>file-path</em> [<em>file-path</em>] ...</td></tr><tr><td nowrap="nowrap"><a href="directive-dict.html#Context" class="help">Context:
                  </a></td><td>server config</td></tr><tr><td nowrap="nowrap"><a href="directive-dict.html#Status" class="help">Status:
                  </a></td><td>Experimental</td></tr><tr><td nowrap="nowrap"><a href="directive-dict.html#Module" class="help">Module:
                  </a></td><td>mod_file_cache</td></tr></table></td></tr></table>
    <p>The <code class="directive">CacheFile</code> directive opens handles to
    one or more files (given as whitespace separated arguments) and
    places these handles into the cache at server startup
    time. Handles to cached files are automatically closed on a server
    shutdown.  When the files have changed on the filesystem, the
    server should be restarted to to re-cache them.</p>

    <p>Be careful with the <em>file-path</em> arguments: They have
    to literally match the filesystem path Apache's URL-to-filename
    translation handlers create. We cannot compare inodes or other
    stuff to match paths through symbolic links <em>etc.</em>
    because that again would cost extra <code>stat()</code> system
    calls which is not acceptable. This module may or may not work
    with filenames rewritten by <code><a href="../mod/mod_alias.html">mod_alias</a></code> or
    <code><a href="../mod/mod_rewrite.html">mod_rewrite</a></code>.</p>

<blockquote><table cellpadding="10"><tr><td bgcolor="#eeeeee"><p align="center"><strong>Example</strong></p><code>
  CacheFile /usr/local/apache/htdocs/index.html
</code></td></tr></table></blockquote>
<hr><h2><a name="MMapFile">MMapFile</a> <a name="mmapfile">Directive</a></h2><table cellpadding="1" cellspacing="0" border="0" bgcolor="#cccccc"><tr><td><table bgcolor="#ffffff"><tr><td nowrap="nowrap"><strong>Description: 
                  </strong></td><td></td></tr><tr><td nowrap="nowrap"><a href="directive-dict.html#Syntax" class="help">Syntax:
                  </a></td><td>MMapFile <em>file-path</em> [<em>file-path</em>] ...</td></tr><tr><td nowrap="nowrap"><a href="directive-dict.html#Context" class="help">Context:
                  </a></td><td>server config</td></tr><tr><td nowrap="nowrap"><a href="directive-dict.html#Status" class="help">Status:
                  </a></td><td>Experimental</td></tr><tr><td nowrap="nowrap"><a href="directive-dict.html#Module" class="help">Module:
                  </a></td><td>mod_file_cache</td></tr></table></td></tr></table>
    <p>The <code class="directive">MMapFile</code> directive maps one or more files
    (given as whitespace separated arguments) into memory at server
    startup time. They are automatically unmapped on a server
    shutdown. When the files have changed on the filesystem at
    least a HUP or USR1 signal should be send to the server to
    re-mmap them.</p>

    <p>Be careful with the <em>file-path</em> arguments: They have
    to literally match the filesystem path Apache's URL-to-filename
    translation handlers create. We cannot compare inodes or other
    stuff to match paths through symbolic links <em>etc.</em>
    because that again would cost extra <code>stat()</code> system
    calls which is not acceptable. This module may or may not work
    with filenames rewritten by <code><a href="../mod/mod_alias.html">mod_alias</a></code> or
    <code><a href="../mod/mod_rewrite.html">mod_rewrite</a></code>.</p>

<blockquote><table cellpadding="10"><tr><td bgcolor="#eeeeee"><p align="center"><strong>Example</strong></p><code>
  MMapFile /usr/local/apache/htdocs/index.html
</code></td></tr></table></blockquote>
<hr></blockquote><h3 align="center">Apache HTTP Server Version 2.0</h3><a href="./"><img src="../images/index.gif" alt="Index"></a><a href="../"><img src="../images/home.gif" alt="Home"></a></body></html>